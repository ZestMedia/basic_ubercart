<?php
/**
 * @file
 * Code for the Basic Ubercart Product Reviews feature.
 */

include_once 'basic_ubercart_product_reviews.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function basic_ubercart_product_reviews_form_comment_node_product_form_alter(&$form, &$form_state, $form_id) {

  if($form['#bundle'] === 'comment_node_product') {

    kpr($form);

    $username = $form['author']['name']['#value'];

    $form['comment_body']['und'][0]['#title'] = 'Add your review <small>(' . $username . ')</small>';

    $form['actions']['submit']['#value'] = 'Submit Review';

    // Remove the 'Your name' part.
    unset($form['author']['_author']);

  }

}

function basic_ubercart_product_reviews_theme_registry_alter(&$theme_registry) {
  // Create a variable to store the path to this module
  $basic_ubercart_product_reviews_path = drupal_get_path('module', 'basic_ubercart_product_reviews');

  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'basic_ubercart_product_reviews', $basic_ubercart_product_reviews_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // A list of templates the module will provide templates for
  $hooks = array('comment-wrapper');
  foreach ($hooks as $h) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry
    if (!isset($theme_registry[$h]['theme paths'])) {
      $theme_registry[$h]['theme paths'] = array();
    }
    //Shift this module's directory to the top of the theme path list
    if(is_array($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$h]['theme paths'], $first_element, $basic_ubercart_product_reviews_path);
      } else {
        array_unshift($theme_registry[$h]['theme paths'], $basic_ubercart_product_reviews_path);
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function basic_ubercart_product_reviews_node_view($node, $view_mode, $langcode) {
  if (isset($node->comment_limit) && $node->comment_limit) {
    // Mimic the validation made by the comment module
    if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
      unset($node->content['comments']['comment_form']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function basic_ubercart_product_reviews_preprocess_comment(&$variables) {

  // Add the rating to each comment.
  if ($variables['elements']['#bundle'] === 'comment_node_product') {

    $uid = $variables['elements']['#comment']->uid;
    $nid = $variables['elements']['#node']->nid;
    $users_rating = votingapi_select_votes(array('entity_id' => $nid, 'entity_type' => 'node', 'uid' => $uid), 1);
    if (!empty($users_rating)) {
      $fivestar_variables = array('rating' => $users_rating[0]['value'], 'stars' => 5, 'tag' => 'Rating', 'widget' => array('name' => 'Basic'));
      $theee = theme_fivestar_static($fivestar_variables);
      $variables['author'] = $theee . ' ' . $variables['author'];
    }

  }

}
